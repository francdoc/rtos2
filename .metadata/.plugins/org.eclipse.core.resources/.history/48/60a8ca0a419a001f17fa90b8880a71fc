// app.c

#include "main.h"
#include "cmsis_os.h"
#include "logger.h"
#include "dwt.h"
#include "board.h"

#include "task_button.h"
#include "task_led.h"
#include "task_ui.h"
#include "app.h"

// NOTE: now I will not make the queue handles extern (global).
//		 I can encapsulate them within the app.c file, keeping them private to that file. Instead of using extern declarations in app.h.
// 		 So that we can manage all the queue handles through active_object_t instances without exposing them externally.

static active_object_t ui_ao;

static active_object_t led_red_ao;
static active_object_t led_blue_ao;
static active_object_t led_yellow_ao;

void app_init(void)
{
    ui_ao.event_queue_h = xQueueCreate(1, sizeof(button_event_t));

    configASSERT(ui_ao.event_queue_h != NULL);

    vQueueAddToRegistry(ui_ao.event_queue_h , "UI Queue");

    led_red_ao.event_queue_h = xQueueCreate(1, sizeof(led_event_t));
    led_blue_ao.event_queue_h = xQueueCreate(1, sizeof(led_event_t));
    led_yellow_ao.event_queue_h = xQueueCreate(1, sizeof(led_event_t));

    configASSERT(led_red_ao.event_queue_h != NULL);
    configASSERT(led_blue_ao.event_queue_h != NULL);
    configASSERT(led_yellow_ao.event_queue_h != NULL);

    vQueueAddToRegistry(led_red_ao.event_queue_h, "LED Red Queue");
    vQueueAddToRegistry(led_blue_ao.event_queue_h, "LED Blue Queue");
    vQueueAddToRegistry(led_yellow_ao.event_queue_h, "LED Yellow Queue");

    // NOTE: There are generally two main approaches for the UI active object to access the queue handles of each LED active object:
    // 1) Using global handles.
    // 2) Passing each LED active object to the UI active object, allowing private access to these handles.

    // In this case we choose option 2).

    button_task_params_t button_task_params = {
    		.ui_queue_h = ui_ao.event_queue_h
    };

    ui_task_params_t ui_task_params = {
           .ui_ao = ui_ao,
           .led_red_queue_h = led_red_ao.event_queue_h,
           .led_blue_queue_h = led_blue_ao.event_queue_h,
           .led_yellow_queue_h = led_yellow_ao.event_queue_h
       };

    led_task_params_t led_red_params = {
    		.led_ao = led_red_ao
    };

    led_task_params_t led_blue_params = {
    		.led_ao = led_blue_ao
    };

    led_task_params_t led_yellow_params = {
    		.led_ao = led_yellow_ao
    };

    xTaskCreate(task_button, "Button Task", 256, (void*)&button_task_params, tskIDLE_PRIORITY, NULL);

    xTaskCreate(task_ui, "UI Task", 256, (void*)&ui_task_params, tskIDLE_PRIORITY, NULL);

    /*
    xTaskCreate(task_led, "LED Red Task", 256, (void*)&led_red_params, tskIDLE_PRIORITY, NULL);
    xTaskCreate(task_led, "LED Blue Task", 256, (void*)&led_blue_params, tskIDLE_PRIORITY, NULL);
    xTaskCreate(task_led, "LED Yellow Task", 256, (void*)&led_yellow_params, tskIDLE_PRIORITY, NULL);
	*/

    LOGGER_INFO("App initialized");

    cycle_counter_init();
}

/********************** end of file ******************************************/
