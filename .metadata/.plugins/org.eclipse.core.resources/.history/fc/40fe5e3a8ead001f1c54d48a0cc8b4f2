#include "main.h"
#include "cmsis_os.h"
#include "logger.h"
#include "dwt.h"
#include "board.h"
#include "app.h"

#include "task_button.h"
#include "task_led.h"
#include "task_ui.h"

#include "ao.h"

/********************** macros and definitions *******************************/
#define LED_AO_TASK_PRIORITY (tskIDLE_PRIORITY + 1)
#define UI_AO_TASK_PRIORITY (tskIDLE_PRIORITY + 1)
#define BUTTON_TASK_PRIORITY (tskIDLE_PRIORITY + 1)
/********************** internal data declaration ****************************/
static active_object_t led_obj, ui_interface;

static all_obj_t all_obj = {
  .led = &led_obj,
  .ui = &ui_interface
};

enum {
  RED_LED_AO_ID = 1,
  GREEN_LED_AO_ID,
  BLUE_LED_AO_ID,
  UI_INTERFACE_AO_ID
};
/********************** internal functions declaration ***********************/

/********************** internal data definition *****************************/

/********************** external data declaration *****************************/

/********************** external functions definition ************************/
void app_init(void)
{

  init_ui_active_object(&ui_interface, ui_process_event, UI_AO_TASK_PRIORITY);
  init_led_active_object(&led_obj, task_led, LED_AO_TASK_PRIORITY);

  BaseType_t status;

  status = xTaskCreate(task_button, "Button_Task", configMINIMAL_STACK_SIZE, &all_obj, BUTTON_TASK_PRIORITY, NULL);
  configASSERT(pdPASS == status);
  while (pdPASS != status)
  {
    // error
  }

  LOGGER_INFO("app init");

  cycle_counter_init();
}

/********************** end of file ******************************************/
